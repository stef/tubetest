#!/usr/bin/ksh
#
# dependencies: pv, socat
# invoke with
# ./tubetest your.server.org 1080 6991 1080 8888

log="tubetest.log"
debug=/bin/false
testserver=$1; shift 1

function cleanup {
    # is a bit drastic, let's hope there are no other socat instances
    # running on the testserver
    ssh -q $testserver killall socat 2>/dev/null
}

function getownip {
    ssh -q $testserver socat TCP4-LISTEN:4000,pktinfo,reuseaddr system:'"echo \"\\\"\$SOCAT_PEERADDR\\\"\""' &
    socat tcp4:$testserver:4000,reuseaddr,retry=3,interval=3 -
}

function startlocalsink {
    port=$1
    # client to receive tcp stream
    $debug && print "\tstarting local sink"
    echo 'asdf' | socat "$proto"4:$testserver:$port,retry=3,interval=3 - 2>/dev/null |
        pv -ftrab 2>&1 >/dev/null |&
}

function startlocalsource {
    port=$1
    # client sending constant stream of random data
    $debug && print "\tstarting local random source"
    [[ "$proto" == "tcp" ]] && { bsize="" ; retry=",retry=3,interval=3"; } || { retry="" ; bsize="-b 1472"; }
    (openssl enc -aes-128-ofb -k $RANDOM -in /dev/zero 2>/dev/null |
        pv -ftrab |
        socat $bsize - "$proto"4:$testserver:$port$retry >/dev/null 2>/dev/null) 2>&1 |&
}

function startremotesink {
    port=$1
    # server acting as sink for sent data
    $debug && print "\tstarting remote sink"
    ssh -q $testserver socat "$proto"4-listen:$port,reuseaddr /dev/null 2>/dev/null &
}

function startremotesource {
    port=$1
    # server sending constant stream of random numbers
    $debug && print "\tstarting remote random source"
    ssh -q $testserver socat exec:\"openssl enc -aes-128-ofb -k $RANDOM -in /dev/zero\" "$proto"4-listen:$port,reuseaddr 2>/dev/null &
}

function startlocaludpsink {
    port=$1
    # client to receive tcp stream
    $debug && print "\tstarting local sink"
    socat udp4-recv:$port,reuseaddr - 2>/dev/null |
        pv -ftrab 2>&1 >/dev/null |&
}

function startremoteudpsource {
    [[ -z "$ownip" ]] && ownip=$(getownip)
    port=$1
    timer=$2
    # server sending constant stream of random numbers
    $debug && print "\tstarting remote random source"
    ssh -q $testserver socat -b 1472 exec:\"openssl enc -aes-128-ofb -k $RANDOM -in /dev/zero\" udp4-sendto:$ownip:$port,reuseaddr \& \; sleep $timer \; kill '$!' &
}

function throughput {
    direction=$1
    port=$2
    timer=${3:-30}
    printf "\t[%4s] for ${timer}s" $direction
    printf "$(date --rfc-3339=ns|tr ' ' 't') $proto $port $direction ${timer}s\n" >>$log

    cleanup

    if [[ "$proto" == "udp" ]]; then
        if [[ "$direction" == "down" ]]; then
            startlocaludpsink $port
            pid=$!
            startremoteudpsource $port $timer
        else
            # UP
            startremotesink $port
            sleep 1
            startlocalsource $port
            pid=$!
        fi
    else
        # TCP
        if [[ "$direction" == "down" ]]; then
            startremotesource $port
            sleep 1
            startlocalsink $port
            pid=$!
        else
            # UP
            startlocalsource $port
            pid=$!
            startremotesink $port
        fi
    fi

    # set timer
    (sleep $timer; kill $pid ) &
    # print metrix
    sparkline=""; max=""; maxs=""; min=""; mins=""; avg=""
    cat <&p | sed 's/\r/\n/g' | while read line; do
        [[ -z "$line" ]] && continue
        # lineformat example: 1.97MB 0:00:00 [ 580kB/s] [ 504kB/s]
        s=$(echo "$line" | sed 's/.*\[\([^]]*\)].*/\1/') # extract human readable speed
        m=$(echo "$s" | sed 's/.*\(.\)...$/\1/' | tr '[:upper:]' '[:lower:]') # get kilo/mega modifier
        v=$(echo "$s" | sed 's/\(.*\)....$/\1/') # get speed
        b=$(./kilo.awk $v $m b) # convert to speed to bytes/s
        sparkline="$sparkline $b"

        [[ -z "$max" || "$max" -lt "$b" ]] && {
            maxs="$s"
            max="$b"
        }
        [[ -z "$min" || "$min" -gt "$b" ]] && {
            mins="$s"
            min="$b"
        }
        avg=$(echo "$line" | sed 's/.*] \[\([^]]*\)].*/\1/') # extract human readable speed
        t=$(echo "$line" | cut -d' ' -f2) # surgeon extraction
        print "$t $s $avg" >>$log
    done
    printf " $mins(min) $avg(avg) $maxs(max) "
    print "$(date --rfc-3339=ns) results $mins(min) $avg(avg) $maxs(max)" >>$log
    ./spark $sparkline
    cleanup
}

cleanup
trap cleanup KILL TERM

proto="tcp"
len="10"
ownip=''
while [[ "$#" -gt 0 ]]; do
    [[ "$1" == "udp" || "$1" == "tcp" ]] && {
        proto="$1"
        print "changing proto to $proto"
        shift 1
        continue
    }
    print "$1" | egrep -qs "^[0-9]+s" && {
        len=$(echo "$1" | sed 's/\(.*\)s$/\1/')
        print "adjusting timelimit to $len"
        shift 1
        continue
    }
    print "testing $proto/$1"
    throughput down "$1" "$len"
    throughput up "$1" "$len"
    shift 1
done
